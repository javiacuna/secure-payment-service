// github.com/vektra/mockery
// template: testify

package controller

import (
	"secure-payment-service/internal/models"
	"secure-payment-service/internal/transfers"

	mock "github.com/stretchr/testify/mock"
)

// NewMockTransferService creates a new instance of MockTransferService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTransferService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTransferService {
	mock := &MockTransferService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockTransferService is an autogenerated mock type for the TransferService type
type MockTransferService struct {
	mock.Mock
}

type MockTransferService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTransferService) EXPECT() *MockTransferService_Expecter {
	return &MockTransferService_Expecter{mock: &_m.Mock}
}

// CreateTransfer provides a mock function for the type MockTransferService
func (_mock *MockTransferService) CreateTransfer(req transfers.TransferRequest) (string, error) {
	ret := _mock.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for CreateTransfer")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(transfers.TransferRequest) (string, error)); ok {
		return returnFunc(req)
	}
	if returnFunc, ok := ret.Get(0).(func(transfers.TransferRequest) string); ok {
		r0 = returnFunc(req)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(transfers.TransferRequest) error); ok {
		r1 = returnFunc(req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTransferService_CreateTransfer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTransfer'
type MockTransferService_CreateTransfer_Call struct {
	*mock.Call
}

// CreateTransfer is a helper method to define mock.On call
//   - req transfers.TransferRequest
func (_e *MockTransferService_Expecter) CreateTransfer(req interface{}) *MockTransferService_CreateTransfer_Call {
	return &MockTransferService_CreateTransfer_Call{Call: _e.mock.On("CreateTransfer", req)}
}

func (_c *MockTransferService_CreateTransfer_Call) Run(run func(req transfers.TransferRequest)) *MockTransferService_CreateTransfer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 transfers.TransferRequest
		if args[0] != nil {
			arg0 = args[0].(transfers.TransferRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockTransferService_CreateTransfer_Call) Return(s string, err error) *MockTransferService_CreateTransfer_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockTransferService_CreateTransfer_Call) RunAndReturn(run func(req transfers.TransferRequest) (string, error)) *MockTransferService_CreateTransfer_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccountBalance provides a mock function for the type MockTransferService
func (_mock *MockTransferService) GetAccountBalance(id string) (float64, error) {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountBalance")
	}

	var r0 float64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (float64, error)); ok {
		return returnFunc(id)
	}
	if returnFunc, ok := ret.Get(0).(func(string) float64); ok {
		r0 = returnFunc(id)
	} else {
		r0 = ret.Get(0).(float64)
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTransferService_GetAccountBalance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccountBalance'
type MockTransferService_GetAccountBalance_Call struct {
	*mock.Call
}

// GetAccountBalance is a helper method to define mock.On call
//   - id string
func (_e *MockTransferService_Expecter) GetAccountBalance(id interface{}) *MockTransferService_GetAccountBalance_Call {
	return &MockTransferService_GetAccountBalance_Call{Call: _e.mock.On("GetAccountBalance", id)}
}

func (_c *MockTransferService_GetAccountBalance_Call) Run(run func(id string)) *MockTransferService_GetAccountBalance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockTransferService_GetAccountBalance_Call) Return(f float64, err error) *MockTransferService_GetAccountBalance_Call {
	_c.Call.Return(f, err)
	return _c
}

func (_c *MockTransferService_GetAccountBalance_Call) RunAndReturn(run func(id string) (float64, error)) *MockTransferService_GetAccountBalance_Call {
	_c.Call.Return(run)
	return _c
}

// GetTransfer provides a mock function for the type MockTransferService
func (_mock *MockTransferService) GetTransfer(id string) (models.Transfer, error) {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetTransfer")
	}

	var r0 models.Transfer
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (models.Transfer, error)); ok {
		return returnFunc(id)
	}
	if returnFunc, ok := ret.Get(0).(func(string) models.Transfer); ok {
		r0 = returnFunc(id)
	} else {
		r0 = ret.Get(0).(models.Transfer)
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTransferService_GetTransfer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTransfer'
type MockTransferService_GetTransfer_Call struct {
	*mock.Call
}

// GetTransfer is a helper method to define mock.On call
//   - id string
func (_e *MockTransferService_Expecter) GetTransfer(id interface{}) *MockTransferService_GetTransfer_Call {
	return &MockTransferService_GetTransfer_Call{Call: _e.mock.On("GetTransfer", id)}
}

func (_c *MockTransferService_GetTransfer_Call) Run(run func(id string)) *MockTransferService_GetTransfer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockTransferService_GetTransfer_Call) Return(transfer models.Transfer, err error) *MockTransferService_GetTransfer_Call {
	_c.Call.Return(transfer, err)
	return _c
}

func (_c *MockTransferService_GetTransfer_Call) RunAndReturn(run func(id string) (models.Transfer, error)) *MockTransferService_GetTransfer_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateTransfer provides a mock function for the type MockTransferService
func (_mock *MockTransferService) UpdateTransfer(id string, status string) error {
	ret := _mock.Called(id, status)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTransfer")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = returnFunc(id, status)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTransferService_UpdateTransfer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateTransfer'
type MockTransferService_UpdateTransfer_Call struct {
	*mock.Call
}

// UpdateTransfer is a helper method to define mock.On call
//   - id string
//   - status string
func (_e *MockTransferService_Expecter) UpdateTransfer(id interface{}, status interface{}) *MockTransferService_UpdateTransfer_Call {
	return &MockTransferService_UpdateTransfer_Call{Call: _e.mock.On("UpdateTransfer", id, status)}
}

func (_c *MockTransferService_UpdateTransfer_Call) Run(run func(id string, status string)) *MockTransferService_UpdateTransfer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTransferService_UpdateTransfer_Call) Return(err error) *MockTransferService_UpdateTransfer_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTransferService_UpdateTransfer_Call) RunAndReturn(run func(id string, status string) error) *MockTransferService_UpdateTransfer_Call {
	_c.Call.Return(run)
	return _c
}
