// github.com/vektra/mockery
// template: testify

package service

import (
	"secure-payment-service/internal/models"

	mock "github.com/stretchr/testify/mock"
)

// NewMockTransferRepository creates a new instance of MockTransferRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTransferRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTransferRepository {
	mock := &MockTransferRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockTransferRepository is an autogenerated mock type for the TransferRepository type
type MockTransferRepository struct {
	mock.Mock
}

type MockTransferRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTransferRepository) EXPECT() *MockTransferRepository_Expecter {
	return &MockTransferRepository_Expecter{mock: &_m.Mock}
}

// CreateTransfer provides a mock function for the type MockTransferRepository
func (_mock *MockTransferRepository) CreateTransfer(from string, to string, amount float64) (string, error) {
	ret := _mock.Called(from, to, amount)

	if len(ret) == 0 {
		panic("no return value specified for CreateTransfer")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string, float64) (string, error)); ok {
		return returnFunc(from, to, amount)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string, float64) string); ok {
		r0 = returnFunc(from, to, amount)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(string, string, float64) error); ok {
		r1 = returnFunc(from, to, amount)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTransferRepository_CreateTransfer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTransfer'
type MockTransferRepository_CreateTransfer_Call struct {
	*mock.Call
}

// CreateTransfer is a helper method to define mock.On call
//   - from string
//   - to string
//   - amount float64
func (_e *MockTransferRepository_Expecter) CreateTransfer(from interface{}, to interface{}, amount interface{}) *MockTransferRepository_CreateTransfer_Call {
	return &MockTransferRepository_CreateTransfer_Call{Call: _e.mock.On("CreateTransfer", from, to, amount)}
}

func (_c *MockTransferRepository_CreateTransfer_Call) Run(run func(from string, to string, amount float64)) *MockTransferRepository_CreateTransfer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 float64
		if args[2] != nil {
			arg2 = args[2].(float64)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockTransferRepository_CreateTransfer_Call) Return(s string, err error) *MockTransferRepository_CreateTransfer_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockTransferRepository_CreateTransfer_Call) RunAndReturn(run func(from string, to string, amount float64) (string, error)) *MockTransferRepository_CreateTransfer_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccountBalance provides a mock function for the type MockTransferRepository
func (_mock *MockTransferRepository) GetAccountBalance(id string) (float64, error) {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountBalance")
	}

	var r0 float64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (float64, error)); ok {
		return returnFunc(id)
	}
	if returnFunc, ok := ret.Get(0).(func(string) float64); ok {
		r0 = returnFunc(id)
	} else {
		r0 = ret.Get(0).(float64)
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTransferRepository_GetAccountBalance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccountBalance'
type MockTransferRepository_GetAccountBalance_Call struct {
	*mock.Call
}

// GetAccountBalance is a helper method to define mock.On call
//   - id string
func (_e *MockTransferRepository_Expecter) GetAccountBalance(id interface{}) *MockTransferRepository_GetAccountBalance_Call {
	return &MockTransferRepository_GetAccountBalance_Call{Call: _e.mock.On("GetAccountBalance", id)}
}

func (_c *MockTransferRepository_GetAccountBalance_Call) Run(run func(id string)) *MockTransferRepository_GetAccountBalance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockTransferRepository_GetAccountBalance_Call) Return(f float64, err error) *MockTransferRepository_GetAccountBalance_Call {
	_c.Call.Return(f, err)
	return _c
}

func (_c *MockTransferRepository_GetAccountBalance_Call) RunAndReturn(run func(id string) (float64, error)) *MockTransferRepository_GetAccountBalance_Call {
	_c.Call.Return(run)
	return _c
}

// GetTransfer provides a mock function for the type MockTransferRepository
func (_mock *MockTransferRepository) GetTransfer(id string) (models.Transfer, error) {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetTransfer")
	}

	var r0 models.Transfer
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (models.Transfer, error)); ok {
		return returnFunc(id)
	}
	if returnFunc, ok := ret.Get(0).(func(string) models.Transfer); ok {
		r0 = returnFunc(id)
	} else {
		r0 = ret.Get(0).(models.Transfer)
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTransferRepository_GetTransfer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTransfer'
type MockTransferRepository_GetTransfer_Call struct {
	*mock.Call
}

// GetTransfer is a helper method to define mock.On call
//   - id string
func (_e *MockTransferRepository_Expecter) GetTransfer(id interface{}) *MockTransferRepository_GetTransfer_Call {
	return &MockTransferRepository_GetTransfer_Call{Call: _e.mock.On("GetTransfer", id)}
}

func (_c *MockTransferRepository_GetTransfer_Call) Run(run func(id string)) *MockTransferRepository_GetTransfer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockTransferRepository_GetTransfer_Call) Return(transfer models.Transfer, err error) *MockTransferRepository_GetTransfer_Call {
	_c.Call.Return(transfer, err)
	return _c
}

func (_c *MockTransferRepository_GetTransfer_Call) RunAndReturn(run func(id string) (models.Transfer, error)) *MockTransferRepository_GetTransfer_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateTransfer provides a mock function for the type MockTransferRepository
func (_mock *MockTransferRepository) UpdateTransfer(id string, status string) error {
	ret := _mock.Called(id, status)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTransfer")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = returnFunc(id, status)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTransferRepository_UpdateTransfer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateTransfer'
type MockTransferRepository_UpdateTransfer_Call struct {
	*mock.Call
}

// UpdateTransfer is a helper method to define mock.On call
//   - id string
//   - status string
func (_e *MockTransferRepository_Expecter) UpdateTransfer(id interface{}, status interface{}) *MockTransferRepository_UpdateTransfer_Call {
	return &MockTransferRepository_UpdateTransfer_Call{Call: _e.mock.On("UpdateTransfer", id, status)}
}

func (_c *MockTransferRepository_UpdateTransfer_Call) Run(run func(id string, status string)) *MockTransferRepository_UpdateTransfer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTransferRepository_UpdateTransfer_Call) Return(err error) *MockTransferRepository_UpdateTransfer_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTransferRepository_UpdateTransfer_Call) RunAndReturn(run func(id string, status string) error) *MockTransferRepository_UpdateTransfer_Call {
	_c.Call.Return(run)
	return _c
}
